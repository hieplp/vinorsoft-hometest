/*
 * This file is generated by jOOQ.
 */
package com.vinorsoft.nhanvien.repository.generate.tables;


import com.vinorsoft.nhanvien.repository.generate.Keys;
import com.vinorsoft.nhanvien.repository.generate.tables.records.NhanVienRecord;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import java.time.LocalDate;
import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class NhanVien extends TableImpl<NhanVienRecord> {

    /**
     * The reference instance of <code>nhan_vien.nhan_vien</code>
     */
    public static final NhanVien NHAN_VIEN_ = new NhanVien();
    private static final long serialVersionUID = 1L;
    /**
     * The column <code>nhan_vien.nhan_vien.id</code>.
     */
    public final TableField<NhanVienRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");
    /**
     * The column <code>nhan_vien.nhan_vien.chuc_vu_id</code>.
     */
    public final TableField<NhanVienRecord, String> CHUC_VU_ID = createField(DSL.name("chuc_vu_id"), SQLDataType.VARCHAR(10).defaultValue(DSL.inline("NULL", SQLDataType.VARCHAR)), this, "");
    /**
     * The column <code>nhan_vien.nhan_vien.email</code>.
     */
    public final TableField<NhanVienRecord, String> EMAIL = createField(DSL.name("email"), SQLDataType.VARCHAR(100).defaultValue(DSL.inline("NULL", SQLDataType.VARCHAR)), this, "");
    /**
     * The column <code>nhan_vien.nhan_vien.ho_va_ten</code>.
     */
    public final TableField<NhanVienRecord, String> HO_VA_TEN = createField(DSL.name("ho_va_ten"), SQLDataType.VARCHAR(100).defaultValue(DSL.inline("NULL", SQLDataType.VARCHAR)), this, "");
    /**
     * The column <code>nhan_vien.nhan_vien.luong</code>.
     */
    public final TableField<NhanVienRecord, Double> LUONG = createField(DSL.name("luong"), SQLDataType.DOUBLE.nullable(false), this, "");
    /**
     * The column <code>nhan_vien.nhan_vien.ma_nhan_vien</code>.
     */
    public final TableField<NhanVienRecord, String> MA_NHAN_VIEN = createField(DSL.name("ma_nhan_vien"), SQLDataType.VARCHAR(6).defaultValue(DSL.inline("NULL", SQLDataType.VARCHAR)), this, "");
    /**
     * The column <code>nhan_vien.nhan_vien.ngay_sinh</code>.
     */
    public final TableField<NhanVienRecord, LocalDate> NGAY_SINH = createField(DSL.name("ngay_sinh"), SQLDataType.LOCALDATE.defaultValue(DSL.inline("NULL", SQLDataType.LOCALDATE)), this, "");
    /**
     * The column <code>nhan_vien.nhan_vien.phong_ban_id</code>.
     */
    public final TableField<NhanVienRecord, String> PHONG_BAN_ID = createField(DSL.name("phong_ban_id"), SQLDataType.VARCHAR(10).defaultValue(DSL.inline("NULL", SQLDataType.VARCHAR)), this, "");
    /**
     * The column <code>nhan_vien.nhan_vien.que_quan</code>.
     */
    public final TableField<NhanVienRecord, String> QUE_QUAN = createField(DSL.name("que_quan"), SQLDataType.VARCHAR(100).defaultValue(DSL.inline("NULL", SQLDataType.VARCHAR)), this, "");
    /**
     * The column <code>nhan_vien.nhan_vien.sdt</code>.
     */
    public final TableField<NhanVienRecord, String> SDT = createField(DSL.name("sdt"), SQLDataType.VARCHAR(10).defaultValue(DSL.inline("NULL", SQLDataType.VARCHAR)), this, "");
    /**
     * The column <code>nhan_vien.nhan_vien.trang_thai</code>.
     */
    public final TableField<NhanVienRecord, Byte> TRANG_THAI = createField(DSL.name("trang_thai"), SQLDataType.TINYINT.nullable(false), this, "");

    private NhanVien(Name alias, Table<NhanVienRecord> aliased) {
        this(alias, aliased, null);
    }

    private NhanVien(Name alias, Table<NhanVienRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>nhan_vien.nhan_vien</code> table reference
     */
    public NhanVien(String alias) {
        this(DSL.name(alias), NHAN_VIEN_);
    }

    /**
     * Create an aliased <code>nhan_vien.nhan_vien</code> table reference
     */
    public NhanVien(Name alias) {
        this(alias, NHAN_VIEN_);
    }

    /**
     * Create a <code>nhan_vien.nhan_vien</code> table reference
     */
    public NhanVien() {
        this(DSL.name("nhan_vien"), null);
    }

    public <O extends Record> NhanVien(Table<O> child, ForeignKey<O, NhanVienRecord> key) {
        super(child, key, NHAN_VIEN_);
    }

    /**
     * The class holding records for this type
     */
    @Override
    public Class<NhanVienRecord> getRecordType() {
        return NhanVienRecord.class;
    }

    @Override
    public Schema getSchema() {
        return com.vinorsoft.nhanvien.repository.generate.NhanVien.NHAN_VIEN;
    }

    @Override
    public Identity<NhanVienRecord, Integer> getIdentity() {
        return (Identity<NhanVienRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<NhanVienRecord> getPrimaryKey() {
        return Keys.KEY_NHAN_VIEN_PRIMARY;
    }

    @Override
    public List<UniqueKey<NhanVienRecord>> getKeys() {
        return Arrays.<UniqueKey<NhanVienRecord>>asList(Keys.KEY_NHAN_VIEN_PRIMARY, Keys.KEY_NHAN_VIEN_UK_12WAXXSINIYDDV2LT9IANFH8A, Keys.KEY_NHAN_VIEN_UK_F0QENTJXCFEOYRWXPV5HTU514, Keys.KEY_NHAN_VIEN_UK_MAFUWXHL2BCV6OBB9FKOUOKEC);
    }

    @Override
    public NhanVien as(String alias) {
        return new NhanVien(DSL.name(alias), this);
    }

    @Override
    public NhanVien as(Name alias) {
        return new NhanVien(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public NhanVien rename(String name) {
        return new NhanVien(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public NhanVien rename(Name name) {
        return new NhanVien(name, null);
    }

    // -------------------------------------------------------------------------
    // Row11 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row11<Integer, String, String, String, Double, String, LocalDate, String, String, String, Byte> fieldsRow() {
        return (Row11) super.fieldsRow();
    }
}
