/*
 * This file is generated by jOOQ.
 */
package com.vinorsoft.nhanvien.repository.generate.tables;


import com.vinorsoft.nhanvien.repository.generate.Keys;
import com.vinorsoft.nhanvien.repository.generate.NhanVien;
import com.vinorsoft.nhanvien.repository.generate.tables.records.PhongBanRecord;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class PhongBan extends TableImpl<PhongBanRecord> {

    /**
     * The reference instance of <code>nhan_vien.phong_ban</code>
     */
    public static final PhongBan PHONG_BAN = new PhongBan();
    private static final long serialVersionUID = 1L;
    /**
     * The column <code>nhan_vien.phong_ban.phong_ban_id</code>.
     */
    public final TableField<PhongBanRecord, String> PHONG_BAN_ID = createField(DSL.name("phong_ban_id"), SQLDataType.VARCHAR(10).nullable(false), this, "");
    /**
     * The column <code>nhan_vien.phong_ban.chuc_nang</code>.
     */
    public final TableField<PhongBanRecord, String> CHUC_NANG = createField(DSL.name("chuc_nang"), SQLDataType.VARCHAR(100).defaultValue(DSL.inline("NULL", SQLDataType.VARCHAR)), this, "");
    /**
     * The column <code>nhan_vien.phong_ban.ten_phong_ban</code>.
     */
    public final TableField<PhongBanRecord, String> TEN_PHONG_BAN = createField(DSL.name("ten_phong_ban"), SQLDataType.VARCHAR(100).defaultValue(DSL.inline("NULL", SQLDataType.VARCHAR)), this, "");

    private PhongBan(Name alias, Table<PhongBanRecord> aliased) {
        this(alias, aliased, null);
    }

    private PhongBan(Name alias, Table<PhongBanRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>nhan_vien.phong_ban</code> table reference
     */
    public PhongBan(String alias) {
        this(DSL.name(alias), PHONG_BAN);
    }

    /**
     * Create an aliased <code>nhan_vien.phong_ban</code> table reference
     */
    public PhongBan(Name alias) {
        this(alias, PHONG_BAN);
    }

    /**
     * Create a <code>nhan_vien.phong_ban</code> table reference
     */
    public PhongBan() {
        this(DSL.name("phong_ban"), null);
    }

    public <O extends Record> PhongBan(Table<O> child, ForeignKey<O, PhongBanRecord> key) {
        super(child, key, PHONG_BAN);
    }

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PhongBanRecord> getRecordType() {
        return PhongBanRecord.class;
    }

    @Override
    public Schema getSchema() {
        return NhanVien.NHAN_VIEN;
    }

    @Override
    public UniqueKey<PhongBanRecord> getPrimaryKey() {
        return Keys.KEY_PHONG_BAN_PRIMARY;
    }

    @Override
    public List<UniqueKey<PhongBanRecord>> getKeys() {
        return Arrays.<UniqueKey<PhongBanRecord>>asList(Keys.KEY_PHONG_BAN_PRIMARY, Keys.KEY_PHONG_BAN_UK_87REOME3QODVJNX84F1OJIF94);
    }

    @Override
    public PhongBan as(String alias) {
        return new PhongBan(DSL.name(alias), this);
    }

    @Override
    public PhongBan as(Name alias) {
        return new PhongBan(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public PhongBan rename(String name) {
        return new PhongBan(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PhongBan rename(Name name) {
        return new PhongBan(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<String, String, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
